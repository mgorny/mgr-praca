\section{Opis protokołu OPC}

\subsection{Rys historyczny}

% http://www.opcconnect.com/history.php

Początków zainteresowania wymianą danych pomiędzy urządzeniami
automatyki przemysłowej i~systemami operacyjnymi ogólnego zastosowania
dopatrywać~się można w~roku 1990. Wprowadzony został wówczas na~rynek
system operacyjny Windows~3.0, posiadający podwaliny wielozadaniowości
--- możliwości pracy z~wieloma programami uruchomionymi jednocześnie,
oraz mechanizm DDE (\textit{Dynamic Data Exchange}), standaryzujący
wymianę danych pomiędzy uruchomionymi aplikacjami.\cite{opc-history}

Już wówczas dostrzegano korzyści przekazywania danych procesowych
do~aplikacji ogólnego zastosowania, jak np.~arkusz kalkulacyjny.
Mechanizm DDE posiadał jednak znaczne ograniczenia. Nie~umożliwiał
chociażby przesyłu informacji pomiędzy różnymi komputerami w~obrębie
sieci komputerowej, a~jego przepustowość była silnie ograniczona.

Kilka firm podejmowało niezależne próby rozwiązania tych problemów,
oferując własne rozwiązania takie jak NetDDE i~FastDDE firmy
Wonderware czy~AdvanceDDE firmy Rockwell Software. Rozwiązania te miały
charakter własnościowy, przez co nie~miały szansy stać~się standardem
przemysłowym.

W~roku 1992 wprowadzono standard OLE 2.0 (\textit{Object Layer
Extensions 2.0}), który charakteryzował~się większą elastycznością
i~wydajnością. W~tym czasie uformowała~się również grupa WinSEM
(\textit{Windows in~Science, Engineering and~Manufacturing}),
zrzeszająca przedstawicieli firm zajmujących~się automatyką przemysłową
i~akwizycją danych pomiarowych zainteresowanych wykorzystaniem systemu
Windows.

Jednym z~obiektów zainteresowań grupy było wykorzystanie techniki OLE
dla~przekazywania danych procesowych pomiędzy programami w~czasie
rzeczywistym. Dostawcy oprogramowania SCADA dostrzegali w~tym możliwość
ustandaryzowania sposobu komunikacji pomiędzy rdzeniem aplikacji SCADA,
a~sterownikami obsługującymi urządzenia pomiarowe --- a~co za~tym idzie,
możliwości wykorzystania jednolitych sterowników urządzeń pomiarowych
dla~wszystkich programów w~systemie Windows.

W~roku 1995 uformowała~się grupa OPC Task Force (\textit{OLE for Process
Control Task Force}), której zadaniem było przygotowanie nowego
standardu wymiany informacji w~krótkim czasie. Pierwszy szkic standardu
OPC pojawił~się w~grudniu tego samego roku, natomiast 29 kwietnia
1996~r. ostatecznie wydano standard OPC w~wersji 1.0. Dalszym rozwojem
standardu zajmować miała~się niezależna organizacja typu non-profit,
OPC Foundation.

W~kolejnych latach protokół OPC był rozwijany i~rozszerzany. Zasadnicza
część standardu została przemianowana na~\textit{OPC Data Access},
i~została poszerzona o~kolejne specyfikacje, uzupełniające
funkcjonalność OPC. Najnowsze wersje poszczególnych specyfikacji
wymienione zostały w~tabeli~\ref{t-opc-classic}.

\begin{table}[ht]
	\caption{Lista specyfikacji OLE for Process Control\cite{opc-classic-list}}
	\label{t-opc-classic}

	\begin{tabular}{l l l p{8cm}}
		\toprule
			Nazwa & Wersja & Wyd. & Obszar \\
		\midrule
			Data Access & 3.00 & 2003 & ogólne koncepcje, odczyt i~zapis
				danych, subskrypcje powiadomień o zmianach \\
			Historical Data Access & 1.20 & 2003 & dostęp do~danych
				historycznych \\
			Alarms and Events & 1.1 & 2002 & monitorowanie i~zgłaszania
				sytuacji alarmowych \\
			XML-Data Access & 1.01 & 2004 & dostęp do~danych w~oparciu
				o~standard XML \\
			Data eXchange & 1.00 & 2003 & wymiana informacji pomiędzy
				serwerami OPC \\
			Complex Data & 1.00 & 2003 & wykorzystanie złożonych
				struktur danych \\
			Security & 1.00 & 2000 & metody kontroli dostępu
				do~aplikacji i~danych \\
			Batch & 2.00 & 2001 & przesył algorytmów do~urządzeń \\
		\bottomrule
	\end{tabular}
\end{table}

% http://documentation.unified-automation.com/uasdkcpp/1.0.0/L2OpcUaMotivation.html

Standard OPC zdobył dużą popularność jako otwarty, ujednolicony sposób
komunikacji pomiędzy urządzeniami automatyki i~systemami komputerowymi.
Jednakże jego podstawę stanowił zamknięty, własnościowy standard DCOM
(\textit{Distributed Common Object Model}) firmy Microsoft, co
praktycznie ograniczało możliwość zastosowania OPC do~platform opartych
o~system Windows.\cite{opc-motivation}

Dlatego też OPC Foundation podjęło prace nad~nowym standardem OPC UA
(\textit{Open Platform Communications Unified Architecture}), które
zaowocowały wypuszczeniem pierwszej wersji jego specyfikacji w~2006~r.
Nowy standard charakteryzuje~się strukturą warstwową, która oddziela
cechy protokołu OPC od~wykorzystywanej platformy komunikacyjnej.
W~wersji 1.00 uwzględniono możliwość kodowania informacji w~otwartym
formacie XML lub~dedykowanym formacie binarnym, natomiast funkcje
komunikacyjne zrealizowano w~oparciu o~protokół TCP lub~usługi SOAP
wykorzystujące protokół HTTP.

W~latach 2010--2011 kolejne części standardu OPC UA zostały przyjęte
jako norma IEC 62541.


\subsection{Warunki licencyjne}

Specyfikacja OPC UA ma charakter własnościowy i~objęta jest
restrykcyjnym prawem autorskim. OPC Foundation zachowuje wyłączne prawo
rozpowszechniania specyfikacji. Członkowie OPC Foundation otrzymują
dostęp~do:

\begin{itemize}
	\item pełnej specyfikacji protokołu wraz z~przeznaczonymi do~odczytu
		maszynowego plikami XML Schema oraz~WSDL,

	\item referencyjną implementację stosu OPC w~postaci binarnej
		z~interfejsem programistycznym dla~języków C, C++, Java
		oraz~platformy .NET,

	\item dodatkowe materiały umożliwiające testowanie wykonanej
		implementacji.
\end{itemize}

Ograniczony, odpłatny dostęp do~specyfikacji poddają w~wątpliwość
podkreślaną przez~autorów otwartość specyfikacji. Chociażby zgodnie
z~definicją zastosowaną przez~Komisję Europejską w~opisie
\textit{European Interoperability Framework for pan-European
eGovernment Services version 1.0}\cite{eurogov}, otwarty standard musi być
udostępniony wszystkim zainteresowanym nieodpłatnie bądź~po~kosztach
druku, wraz z~prawem do~nieograniczego kopiowania, rozpowszechniania
i~użytku. W~myśl tej definicji, OPC UA nie~jest standardem otwartym.

% http://pl.wikipedia.org/wiki/Otwarty_standard#cite_note-1
% http://ec.europa.eu/idabc/servlets/Docd552.pdf?id=19529
% http://ec.europa.eu/idabc/en/document/2319/5644.html


\subsection{Struktura specyfikacji}

\begin{table}[ht]
	\caption{Lista specyfikacji OPC UA\cite{opc-ua-pt1}}
	\label{t-opc-ua}

	\begin{tabular}{l l l p{8cm}}
		\toprule
			Cz. & Tytuł & Wersja & Obszar \\
		\midrule
			1 & Overview and Concepts & 1.02
				& przegląd specyfikacji, koncepcje OPC UA \\
			2 & Security Model & 1.02
				& przegląd problematyki bezpieczeństwa komunikacji
				pomiędzy klientem i~serwerem \\
			3 & Address Space Model & 1.02
				& zawartość i~struktura przestrzeni adresowej \\
			4 & Services & 1.02
				& usługi oferowane przez serwer OPC \\
			5 & Information Model & 1.02
				& typy i~zależności pomiędzy nimi \\
			6 & Mappings & 1.02
				& zasady kodowania danych, mapowanie na~protokoły sieciowe \\
			7 & Profiles & 1.02
				& kryteria i~sposób oceny zgodności implementacji ze~specyfikacją \\
			8 & Data Access & 1.02
				& dostęp do~danych pomiarowych \\
			9 & Alarms and~Conditions & 1.02
				& obsługa stanów alarmowych \\
			10 & Programs & 1.02
				& reprezentacja programów \\
			11 & Historical Access & 1.02
				& dostęp do~danych historycznych oraz historii zdarzeń \\
			12 & Discovery & 1.02.38
				& odnajdywanie serwerów OPC w~sieci lokalnej oraz~globalnej \\
			13 & Aggregates & 1.02
				& dostęp do~wielkości statystycznych, takich jak minimum,
				maksium czy~średnia \\
		\bottomrule
	\end{tabular}
\end{table}

Specyfikacja OPC UA składa~się aktualnie z~13 części, które wymienione
zostały w~tabeli~\ref{t-opc-ua}. Części 1--6 oraz~8 zostały przyjęte
w~latach 2010--2011 jako norma IEC 62541.

Części 1.--5. opisują podstawową część protokołu OPC UA w~sposób
abstrakcyjny. Definiują strukturę sieci, organizację danych i~dostępne
usługi, nie~narzucając konkretnej reprezentacji binarnej czy~sposobu
realizacji komunikacji. Części te mogą posłużyć zaprojektowaniu
i~wykonaniu implementacji stosu OPC UA wraz z~jego wewnętrznym API,
nie~zapewnią jednak współpracy pomiędzy stosami różnych producentów.

Część 6. specyfikacji definiuje standardowe sposoby kodowania danych
oraz~protokoły sieciowe dla~OPC. Na~jej podstawie do~zdefiniowanych
w~poprzednich częściach, abstrakcyjnych typów danych przypisywane
zostają algorytmy serializacji, a~następnie definiowane są protokoły
sieciowe, które umożliwiają przesyłanie do~serwera OPC żądań
i~otrzymywanie odpowiedzi.

Zdefiniowane zostały dwa standardowe sposoby kodowania danych ---
kodowanie binarne oraz~za~pomocą języka XML, oraz~dwa standardowe
protokoły sieciowe --- binarny protokół OPC UA TCP oraz~sposób
wykorzystania transportu HTTP/SOAP. Serwer OPC UA może udostępniać swoje
zasoby przy wykorzystaniu wielu dostępnych protokołów.

Część 7. specyfikacji grupuje serwery OPC w~tzw.~profile. Poszczególne
profile określają wymagania w~stosunku do~zaimplementowanej części
specyfikacji.

Część 8. i~kolejne części specyfikacji określają dodatkowe struktury
danych i~usługi, zbudowane w~oparciu o~bazowe typy zdefiniowane
w~częściach 1.--5. Abstrakcja typów pozwala na~implementację tych części
specyfikacji bez~konieczności definiowania dedykowanego sposobu
kodowania danych --- ich realizacja wykonana może być w~oparciu o~reguły
dla~typów podstawowych określone w~6.~części specyfikacji.


\subsection{Struktura sieci}

Protokół OPC UA oparty jest na~architekturze klient-serwer. Serwery
stanowią węzły sieci pomiarowej, współpracując z~fizycznymi urządzeniami
pomiarowymi oraz~sterującymi. Każdy serwer definiuje przestrzeń
adresową, w~obrębie której zamodelowane są poszczególne obiekty.

Z~każdym serwerem połączonych może być wielu klientów. Klienci ---
w~zależności od~przypisanych uprawnień --- mogą wykonywać określone
operacje na~węzłach przestrzeni adresowej serwera. Do~typowych operacji
należą:

\begin{itemize}
	\item odczyt bieżących i~historycznych danych pomiarowych,

	\item odczyt i~modyfikacja danych sterujących procesami,

	\item monitorowanie zmian danych pomiarowych.
\end{itemize}

\begin{figure}[ht]
	\centering

	\begin{tikzpicture}
		% stacja 1
		\begin{scope}[dashed]
			\draw (0,0) rectangle ++(5,4);
			\node[above] at (2.5,0) {stacja 1.};
		\end{scope}

		\begin{scope}[every node/.style={rectangle, draw}]
			\node (UP1) at (1,1) {UP};
			\node (UP2) at (2,1) {UP};
			\node (UP3) at (3,1) {US};

			\node[minimum width=4cm, minimum height=1.2cm] (OPC1) at
			(2.5,3) {serwer OPC UA};
		\end{scope}
		\node at (4,1) {...};

		\begin{scope}[stealth-stealth, shorten >=1mm, shorten <=1mm]
			\draw (UP1.north) -- (UP1.north |- OPC1.south);
			\draw (UP2.north) -- (UP2.north |- OPC1.south);
			\draw (UP3.north) -- (UP3.north |- OPC1.south);
		\end{scope}

		% stacja 2
		\begin{scope}[dashed]
			\draw (6,0) rectangle ++(5,4);
			\node[above] at (8.5,0) {stacja 2.};
		\end{scope}

		\begin{scope}[every node/.style={rectangle, draw}]
			\node (UP1b) at (7,1) {UP};
			\node (UP2b) at (8,1) {US};
			\node (UP3b) at (9,1) {US};

			\node[minimum width=4cm, minimum height=1.2cm] (OPC2) at
			(8.5,3) {serwer OPC UA};
		\end{scope}
		\node at (10,1) {...};

		\begin{scope}[stealth-stealth, shorten >=1mm, shorten <=1mm]
			\draw (UP1b.north) -- (UP1b.north |- OPC2.south);
			\draw (UP2b.north) -- (UP2b.north |- OPC2.south);
			\draw (UP3b.north) -- (UP3b.north |- OPC2.south);
		\end{scope}

		\begin{scope}[every node/.style={draw, rectangle}]
			% serwer nadrzędny
			\node[minimum width=5cm, minimum height=1.2cm] (OPC3)
				at (5.5,5.25) {serwer nadrzędny};

			% klienci
			\node[minimum width=3cm, minimum height=0.8cm] (OPC4)
				at (2,7) {klient};
			\node[minimum width=3cm, minimum height=0.8cm] (OPC5)
				at (5.5,7) {klient};
			\node[minimum width=3cm, minimum height=0.8cm] (OPC6)
				at (9,7) {klient};
		\end{scope}

		\begin{scope}[stealth-stealth, shorten >=1mm, shorten <=1mm]
			\draw (OPC1.north) ++(1.25,0) -- ++(0,1);
			\draw (OPC2.north) ++(-1.25,0) -- ++(0,1);

			\draw (OPC4.south) |- ++(2,-.35) -- ++(0,-.35);
			\draw (OPC5.south) |- ++(0,-.35) -- ++(0,-.35);
			\draw (OPC6.south) |- ++(-2,-.35) -- ++(0,-.35);
		\end{scope}
	\end{tikzpicture}

	\caption{Przykład hierarchicznej struktura sieci OPC UA}
	\label{rys-siec-opc-ua-hierarch}
\end{figure}

Serwer może również pełnić rolę klienta w~stosunku do~innych serwerów
OPC UA. W~ten sposób we~własnej przestrzeni adresowej może odwzorować
fragmenty przestrzeni adresowych innych serwerów, umożliwiając klientom
pośredni dostęp do~oferowanych przez~nie danych. Pozwala to na~budowanie
sieci pomiarowych o~praktycznie dowolnej strukturze.

Na~rys.~\ref{rys-siec-opc-ua-hierarch} przedstawiono przykład
hierarchicznej struktury sieci OPC UA. W~każdej z~dwóch przedstawionych
stacji pomiarowych znajduje~się serwer OPC UA, do~którego przyłączone są
lokalne urządzenia pomiarowe (UP) i~sterowania (US). Nadrzędny serwer
OPC UA utrzymuje połączenia w~roli klienta do~obu serwerów, i~udostępnia
swoim klientom ich zasoby.


\subsection{Bezpieczeństwo sieci}

\subsubsection{Założenia}

Specyfikacja OPC UA dużą wagę przykłada do~szeroko rozumianych zagadnień
bezpieczeństwa. Rozpatrywane są takie aspekty jak:

\begin{itemize}
	\item uwierzytelnianie klienta i~serwera,

	\item zapewnienie poufności przesyłanych informacji,

	\item zapewnienie integralności przesyłanych informacji,

	\item zdatność systemu do~audytu,

	\item ciągłość dostępu do~usług.
\end{itemize}

W~drugiej części specyfikacji OPC UA rozważane są potencjalne zagrożenia
i~prezentowane są sposoby przeciwdziałania im. Rozwiązania zastosowane
w~OPC UA wzorowane są na~powszechnie stosowanym protokole TLS, jednakże
nie~wykorzystują go bezpośrednio.\cite{opc-ua-pt2}


\subsubsection{Uwierzytelnienie klienta i~serwera}

Uwierzytelnienie klienta i~serwera odbywa~się przy~pomocy certyfikatów
X.509. Każda ze~stron połączenia dysponuje dwoma stałymi zasobami:
certyfikatem X.509 i~powiązanym z~nim kluczem prywatnym. Certyfikat
zawiera informacje o~właścicielu, jego klucz publiczny oraz~podpis
złożony przez~wystawcę (centrum autoryzacji). Każda ze~stron powinna
również posiadać kopię certyfikatu centrum autoryzacji wykorzystywanego
w~danej sieci.

Uwierzytelnienie odbywa~się dwuetapowo:

\begin{enumerate}
	\item poprzez weryfikację prawa klienta (serwera)
		do~posługiwania~się certyfikatem,

	\item oraz poprzez potwierdzenie autentyczności certyfikatu.
\end{enumerate}

Zakłada~się, że~host ma prawo posługiwać~się certyfikatem, jeżeli
posiada klucz prywatny powiązany z~tym certyfikatem. Klucz prywatny
generowany jest na~początku procedury pozyskiwania certyfikatu
i~nigdy nie~jest udostępniany innym urządzeniom.

W~celu potwierdzenia faktu posiadania klucza, host składa przy~jego
pomocy podpis na~przesłanym przez~drugą stronę bloku danych
pseudolosowych. Zastosowanie danych pseudolosowych pozwala
na~zapobieganie atakom typu \textit{rollback}, wykorzystującym
przechwycony wcześniejszy podpis, złożony przez~właściciela certyfikatu.
Złożony podpis weryfikowany jest przy~pomocy klucza publicznego
zawartego w~certyfikacie.

Wyznacznikiem autentyczności certyfikatu jest sygnatura złożona
przez~wystawcę. Weryfikacja sygnatury następuje przy~wykorzystaniu
klucza publicznego zawartego w~certyfikacie centrum autoryzacji.
Potwierdzenie poprawności podpisu pozwala stwierdzić autentyczność
informacji zawartych w~certyfikacie hosta, jak~również fakt jego
wystawienia przez~uznawane centrum autoryzacji.


\subsubsection{Zabezpieczenie przesyłanych wiadomości}

Wiadomości przesyłane za~pośrednictwem protokołu OPC UA zabezpieczone
mogą~być przy~pomocy metod kryptografii symetrycznej. Niezbędne klucze
generowane są przy~pomocy funkcji opisanej w~części szóstej
specyfikacji (\textit{6.4.5 Deriving Keys}).

Protokół obsługuje szyfrowanie wiadomości. Zastosowanie szyfrowania
pozwala na~zapewnienie poufności przesyłanych informacji, w~tym danych
uwierzytelniających użytkowników.

Wiadomości mogą zawierać również sygnatury. Zastosowanie podpisu
cyfrowego pozwala na~weryfikację integralności i~autentyczności
przesyłanych informacji, a~co za~tym idzie zabezpiecza przed~możliwością
ingerencji w~treść pakietów.

Protokół zabezpiecza również przed atakami typu \textit{replay}, opartymi
o~powtórne przesyłanie przechwyconych wcześniej wiadomości. Każda
wiadomość opatrzona jest identyfikatorem sesji, znacznikami czasu
i~unikalnym numerem sekwencyjnym, które sprawiają, że~przechwycone
wcześniej wiadomości nie~zostaną powtórnie zaakceptowane przez~serwer.

\subsubsection{Zapewnienie ciągłości dostępu do~usług}

Podstawowym ryzykiem dla~ciągłości pracy serwera OPC jest jego
przeciążenia poprzez~wysyłanie dużych ilości wiadomości przez~osoby
nieupoważnione. W~celu zminimalizowania tego zagrożenia, protokół OPC UA
znacznie ogranicza zakres wiadomości dostępnych nieuwierzytelnionemu
klientowi.

Wiadomości dostępne przed~uwierzytelnienem w~większości mogą
przetworzone być przy~niewielkim wykorzystaniu zasobów. Wyjątek stanowi
żądanie uwierzytelnienia, które wymaga kosztownych operacji
kryptograficznych. Dlatego też specyfikacja zaleca wprowadzenia
opóźnienia przetwarzania owych żądań po~nieudanej próbie oraz
ograniczenia liczby obsługiwanych jednocześnie kanałów komunikacji.

Przeciwdziałanie atakom na~system wspiera również mechanizm audytu,
wspierający analizowanie zagrożeń dla~systemu. Zalecane jest również
stosowanie zewnętrznych systemów bezpieczeństwa sieciowego — np.~poprzez
stosowanie wirtualnych sieci prywatnych.


\subsection{Przestrzeń adresowa}

\subsubsection{Zawartość przestrzeni adresowej}

Przestrzeń adresowa stanowi logiczną organizację zasobów serwera
OPC UA\cite{opc-ua-pt3}. Poszczególne zasoby modelowane są w~postaci
węzłów. Węzły mogą reprezentować m.in.:

\begin{itemize}
	\item zmienne, stanowiące wynik pomiaru bądź~zmienne sterowania,

	\item obiekty, służące do~organizacji logicznej struktury
	poszczególnych obiektów monitorowanych,

	\item metody, umożliwiające zdalne uruchamianie procesów i~funkcji,

	\item typy danych i~elementy struktury protokołu OPC UA.
\end{itemize}

W~szczególności zauważyć można, że~protokół OPC UA jest silnie
introspektywny --- przestrzeń adresowa zawiera nie~tylko zasoby serwera,
ale~również opisy tych zasobów i~elementów protokołu. Umożliwia to
tworzenie uniwersalnego oprogramowania, które wykorzystując te dane jest
w~stanie prezentować i~wykorzystywać nieznane zasoby, włączając w~to
rozwiązania niestandardowe.

Protokół OPC nie~wprowadza ograniczeń co do~rodzaju zasobów ani~sposobu
pozyskiwania wartości ich atrybutów. Co za~tym idzie, w~przestrzeni
adresowej modelowane mogą być:

\begin{itemize}
	\item lokalne zasoby sprzętowe i~programowe, jak np.~wielkości
	mierzone przez~urządzenia pomiarowe połączone z~serwerem,

	\item lokalne zasoby wirtualne, jak np.~wielkości obliczeniowe,

	\item zdalne zasoby udostępnione przez~inne serwery OPC UA bądź
	innych protokołów sieciowych.
\end{itemize}

\subsubsection{Identyfikatory węzłów}

Węzły w~przestrzeni adresowej adresowane są przy~pomocy identyfikatorów.
Identyfikator każdego węzła musi być unikalny w~obrębie serwera.
W~przypadku sieci współpracujących serwerów, korzystne jest stosowanie
identyfikatorów unikalnych w~obrębie całej sieci i~wspólnych
dla~wszystkich współpracujących serwerów.

Identyfikator węzła może mieć postać:

\begin{itemize}
	\item numeryczną z~zakresu od~$1$ do~$2^{32}-1$ włącznie,

	\item tekstową,

	\item identyfikator sieciowego URI (\textit{Uniform Resource
		Identifier}),

	\item bądź identyfikatora GUID (\textit{Globally Unique Identifier}).
\end{itemize}

Każdy węzeł może mieć identyfikator wyłącznie jednego typu,
a~poszczególne typy są względem siebie rozłączne. Identyfikatory
numeryczne i~tekstowe dodatkowo grupowane są w~przestrzenie nazw.

Standardowe elementy zdefiniowane w~specyfikacji OPC UA opisane są
identyfikatorami numerycznymi w~przestrzeni nazw
\verb http://opcfoundation.org/ua/ .

Identyfikatory węzłów stosowane są również do~identyfikacji sesji.


\subsubsection{Struktura przestrzeni adresowej}

\begin{figure}[h]
	\centering
	\begin{tikzpicture}
		\begin{scope}[every node/.style={
				minimum width=3cm,
				minimum height=1.5cm,
				draw, rectangle,
			}]

			\node (o1) at (0,0) {Obszar 1};

			\node (p1) at (-3,-3) {Przyłącze 1};
			\node (p2) at (3,-3) {Przyłącze 2};

			\node (l1) at (-3,-5) {Licznik};
			\node (l2) at (3,-5) {Licznik};

			\node (v1) at (-5.5,-8) {En. czynna};
			\node (v2) at (-2,-8) {En. bierna};
			\node (v3) at (2,-8) {En. czynna};
			\node (v4) at (5.5,-8) {En. bierna};
		\end{scope}

		\begin{scope}[every node/.style={above, font=\scriptsize}]
			\node at (o1.south) {obiekt};
			\node at (p1.south) {obiekt};
			\node at (p2.south) {obiekt};
			\node at (l1.south) {obiekt};
			\node at (l2.south) {obiekt};
			\node at (v1.south) {zmienna};
			\node at (v2.south) {zmienna};
			\node at (v3.south) {zmienna};
			\node at (v4.south) {zmienna};
		\end{scope}

		\begin{scope}[-stealth, shorten >=1mm, shorten <=1mm]
			\draw (o1) to (p1);
			\draw (o1) to (p2);

			\draw (p1) to (l1);
			\draw (p2) to (l2);

			\draw (l1) to (v1);
			\draw (l1) to (v2);
			\draw (l2) to (v3);
			\draw (l2) to (v4);
		\end{scope}
	\end{tikzpicture}

	\caption{Przykład struktury reprezentującej dane pomiarowe
		z~liczników inteligentnych}
\end{figure}

Węzły połączone są w~strukturę grafu za~pomocą referencji. Referencje
wykorzystywane są do~powiązania węzłów reprezentujących:

\begin{itemize}
	\item zmienne, metody i~właściwości obiektów,

	\item obiekty podrzędne (nadrzędzne) w~strukturze
	hierarchicznej,

	\item węzły definicji typów,

	\item typy (klasy) nadrzędne i~podrzędne.
\end{itemize}

Węzły posiadają szereg atrybutów zdefiniowanych w~obrębie specyfikacji.
Atrybuty są ściśle określone i~przypisane do~poszczególnych rodzajów
węzłów. Atrybuty wykorzystywane są jedynie do~określania ogólnych
właściwości węzłów (jak identyfikator, nazwa czy~wartość);
do~modelowania szczegółowych cech wykorzystuje~się zmienne
i~właściwości, związane z~węzłem za~pomocą referencji.


\subsection{Usługi}

Usługi stanowią podstawową formę interakcji w~protokole OPC UA. Serwer
udostępnia klientowi szereg usług. Do~każdej usługi przypisane jest
określony format żądania i~odpowiedzi. Żądanie określa operacje, jakie
mają zostać wykonane. Odpowiedź z~kolei zawiera stan wykonania operacji
oraz~ewentualne dane wyjściowe.

Po~nawiązaniu połączenia klient może zacząć wykorzystywać usługi
serwera. W~tym celu formułuje wiadomość z~żądaniem i~wysyła ją
do~serwera. Serwer przetwarza otrzymaną wiadomość i~próbuje wykonać
zlecone w~niej operacje. Dla~każdej operacji generuje oddzielny status
(powodzenie bądź niepowodzenie). Po~zakończeniu wykonywania operacji,
serwer formułuje i~przesyła odpowiedź zawierającą status operacji i~dane
wyjściowe.

Standard OPC UA wyróżnia dziwięć podstawowych zestawów usług:

\begin{enumerate}
	\item usługi odnajdywania --- umożliwiające pozyskanie listy adresów
		serwera i~odczytanie ich ustawień bezpieczeństwa,

	\item usługi bezpiecznego kanału --- umożliwiające uzyskanie
		bezpiecznego kanału na~potrzeby komunikacji,

	\item usługi sesji --- przeznaczone do~zarządzania sesją
		i~uwierzytelniania użytkownika,

	\item usługi zarządzania węzłami --- umożlwiające dodawanie,
		modyfikację i~usuwanie węzłów z~przestrzeni adresowej,

	\item usługi widoków --- umożliwiające przeglądanie przestrzeni
		adresowej bądź jej podobszarów zwanych widokami,

	\item usługi atrybutów --- umożliwiające odczyt i~zapis atrybutów,
		wraz z~ich historycznymi wartościami,

	\item usługi metod --- umożliwiające wywoływanie metod obiektów,

	\item usługi monitorowania --- umożliwiające tworzenie, modyfikację
		i~usuwanie obiektów monitorujących atrybuty i~zdarzenia,
		i~generujących powiadomienia odpowiednio o~ich zmianach
		bądź~wystąpieniu,

	\item usługi subskrypcji --- umożliwiające tworzenie, modyfikację
		i~usuwanie subskrypcji powiadomień generowanych
		przez~obiekty monitorujące. Usługi subskrypcji umożliwiają
		również ponowne przesłanie nieotrzymanych wiadomości w~przypadku
		zerwania połączenia.
\end{enumerate}


\subsection{Zapewnienie zgodności pomiędzy kolejnymi wersjami protokołu}

Mechanizm zapewnienia zgodności przy~wprowadzaniu zmian w~strukturze
protokołu OPC UA oparty jest o~mechanizm wersji. Podczas inicjacji
połączenia klient i~serwer określają wykorzystywaną przez~siebie wersję
protokołu. W~przypadku wystąpienia niezgodności, strona obsługującą
nowszą (wyższą) wersję protokołu zobowiązana jest zapewnić zgodność
z~wersją starszą.

Rozwiązanie to gwarantuje możliwość przyłączenia nowszych urządzeń
(zastosowania nowszego oprogramowania) do~istniejących sieci OPC UA
bez~konieczności wymiany bądź przeprogramowania istniejących elementów.
Nakłada jednak na~tworców oprogramowania konieczność implementacji
wszystkich poprzednich wersji protokołu.

Numery wersji przypisywane są w~toku certyfikacji oprogramowania OPC UA.
Oprogramowanie niecertyfikowane zobowiązane jest korzystać z~wersji
,,0''. Oznacza to, że~oprogramowanie nieobjęte procesem certyfikacji
nie~jest w~stanie zagwarantować prawidłowej współpracy z~oprogramowaniem
wykonanym w~oparciu o~inną wersję specyfikacji.




\subsection{Protokół OPC UA TCP}

\subsubsection{Budowa protokołu}

Opis protokołu OPC UA TCP składa~się z~trzech zasadniczych
części\cite{opc-ua-pt6}:

\begin{enumerate}
	\item opisu kodowania standardowych typów OPC UA w~postaci binarnej
		(\textit{OPC UA Binary}),

	\item opisu sposobu nawiązania bezpiecznego połączenia (\textit{OPC
		UA Secure Conversation}),

	\item opisu wiadomości protokołu transportowego (\textit{OPC UA
		TCP}).
\end{enumerate}

Połączenie w~oparciu o~ten protokół rozpatruje~się w~trzech warstwach:

\begin{enumerate}
	\item warstwie transportowej,

	\item warstwie komunikacji (bezpiecznego połączenia),

	\item warstwie sesji.
\end{enumerate}

Zadaniem warstwy transportowej jest nawiązanie i~utrzymanie logicznego
kanału przesyłu pakietów pomiędzy klientem i~serwerem. Do~transmisji
pakietów OPC UA wykorzystuje~się parę protokołów TCP/IP. Warstwa
transmisji wyodrębnia pakiety OPC UA przesyłane w~obrębie strumienia
TCP.

Warstwa komunikacji zajmuje~się budowaniem pakietów w~oparciu
o~zakodowane binarnie wiadomości OPC UA. Do~zadań tej warstwy należy
podział wiadomości na~segmenty o~wielkości ograniczonej możliwościami
serwera (klienta), a~następnie --- o~ile jest to pożądane ---
szyfrowanie i~cyfrowy podpis pakietów.

W~odróżnieniu od~dwóch poprzednio opisanych warstw, warstwa sesji
nie~stanowi części protokołu OPC UA TCP, lecz należy do~podstawowej
specyfikacji OPC UA. Wiąże ona wiadomości przesyłane w~oparciu o~dowolny
protokół (bądź interfejs) OPC UA z~określoną sesją, w~obrębie której
obsługiwane jest uwierzytelnianie klienta oraz~obsługiwane są jego
żądania. Wyodrębnienie warstwy sesji umożliwia utrzymanie ciągłości
przesyłanych wiadomości niezależnie od~przerw w~logicznych kanałach
komunikacji.


\subsubsection{Budowa wiadomości}

\begin{figure}[h]
	\centering

	\begin{tikzpicture}
		\begin{scope}[every node/.style={
					rectangle, draw,
					minimum width=6cm,
					minimum height=1cm
				}]

			\node (t) at (0,0) {nagłówek w. transportowej};
			\node at (0,-1) {nagłówek bezpieczeństwa};
			\node (seq) at (0,-2) {nagłówek sekwencyjny};
			\node[minimum height=2cm] at (0,-3.5) {treść wiadomości};
			\node (p) at (0,-5) {wypełnienie};
			\node (si) at (0,-6) {sygnatura};

		\end{scope}

		\draw[decorate, decoration={brace, amplitude=3mm}]
			(p.south west) -- (t.north west)
			node[above, sloped, midway, yshift=2mm] {dane objęte sygnaturą};
		\draw[decorate, decoration={brace, amplitude=3mm}]
			(seq.north east) -- (si.south east)
			node[above, sloped, midway, yshift=2mm] {dane szyfrowane};
	\end{tikzpicture}

	\caption{Budowa wiadomości OPC UA TCP}
	\label{tcp-budowa}
\end{figure}

Poszczególne wiadomości protokołu OPC UA TCP posiadają budowę
przedstawioną na~rys.~\ref{tcp-budowa} bądź stanowiącą jej podzbiór.

Pierwszy segment pakietu stanowi nagłówek warstwy transportowej, wspólny
dla~wszystkich typów wiadomości. Nagłówek ten zawiera identyfikator typu
wiadomości, flagę rodzaju segmentu oraz~wielkość pakietu. W~przypadku
pakietów typu \verb+OPN+, \verb+MSG+ i~\verb+CLO+ zawiera również numer
bezpiecznego kanału.

Wyróznia~się następujące typy wiadomości:

\begin{itemize}
	\item \verb+HEL+ --- wiadomośc wysyłana przez~klienta w~celu
		zainicjowania połączenia TCP,

	\item \verb+ACK+ --- odpowiedź serwera na~wiadomość \verb+HEL+,

	\item \verb+ERR+ --- błąd protokołu,

	\item \verb+OPN+ --- żądania otwarcia bezpiecznego kanału,

	\item \verb+MSG+ --- wiadomość przesyłana w~obrębie bezpiecznego
		kanału,

	\item \verb+CLO+ --- żądania zamknięcia bezpiecznego kanału.
\end{itemize}

Flaga rodzaju segmentu określa rodzaj segmentu wiadomości przesyłanego
w~pakiecie:

\begin{itemize}
	\item pakiet finalny --- ostatni (lub jedyny) segment wiadomości.
		Po~odebraniu tego pakietu poprzednio zbuforowane segmenty
		wiadomości łączone są z~otrzymanym i~wiadomość jest
		przetwarzana.

	\item Pakiet fragmentu --- segment wiadomości niebędący ostatnim.
		Treść wiadomości zostaje dodana do~bufora, jednakże wiadomośc
		nie~zostaje przetworzona do~otrzymania ostatniego segmentu.

	\item Pakiet anulowania --- żądanie anulowania poprzednio odebranych
		segmentów wiadomości z~powodu błędu. W~tym przypadku bufor
		zawierający poprzednią część wiadomości zostaje wyczyszczony.
\end{itemize}

Określenie rozmiaru pakietu w~nagłówku jest niezbędne do~poprawnego
przesyłu zaszyfrowanych, segmentowanych wiadomości. Znajomość wielkości
pakietu pozwala na~jego wyodrębnienie ze~strumienia TCP bez~konieczności
dekodowania jego treści. Sprzyja to modularności biblioteki obsługi
protokołu.

Nagłówek bezpieczeństwa zawarty jest w~pakietach typu \verb+OPN+,
\verb+MSG+ i~\verb+CLO+. W~przypadku pierwszego z~wymienionych typów
stosuje się nagłówek algorytmu asymetrycznego, zawierający politykę
bezpieczeństwa, certyfikat nadawcy oraz~,,odcisk palca'' wykorzystanego
certyfikatu odbiorcy. W~przypadku pozostałych typów jest to nagłówek
algorytmu symetrycznego, zawierający identyfikator przypisany
do~bezpiecznego kanału.

Nagłówek sekwencyjny stosuje~się w~pakietach typu \verb+OPN+, \verb+MSG+
i~\verb+CLO+. Zawiera on sekwencyjny numer pakietu i~numer żądania.
Numer pakietu ma na~celu zapobieganie atakom typu \textit{replay}
wykorzystujących po~raz~kolejny ten sam pakiet --- kolejne pakiety
o~pokrywającym~się numerze sekwencyjnym muszą zostać odrzucone. Numer
żądania pozwala na~powiązania kolejnych segmentów tego samego pakietu.

Treść wiadomości zawiera określony segment wiadomości. Dla~pakietów typu
\verb+HEL+, \verb+ACK+ i~\verb+ERR+ jest to bezpośrednio serializowana
struktura określona w~protokole. Dla~pakietów typu \verb+OPN+,
\verb+MSG+ i \verb+CLO+ jest to serializowana struktura wiadomości
poprzedzona identyfikatorem węzła typu wiadomości.

Wypełnienie jest elementem opcjonalnym, występującym w~wiadomościach
typu \verb+OPN+, \verb+MSG+ i~\verb+CLO+. Nie~zawiera żadnych
użytecznych informacji, służy jedynie dopełnieniu wielkości całego
pakietu tak, by~pokrył~się z~wielkością słowa algorytmu szyfrowania ---
o~ile szyfrowanie jest stosowane.

Sygnatura jest również opcjonalna, może występować w~wiadomościach tpyu
\verb+OPN+, \verb+MSG+ i~\verb+CLO+. Zawiera kryptograficzny podpis
wiadomości, pozwalający na~zweryfikowanie jej integralności
i~autentyczności. Przy~tworzeniu podpisu uwzględnia~się wszystkie
pozostałe części wiadomości, przed~szyfrowaniem.

Jeżeli szyfrowanie jest wykorzystywane, wiadomości typu \verb+OPN+,
\verb+MSG+ i~\verb+CLO+ są szyfrowane od~początku nagłówka sekwencyjnego
do~końca pakietu. Nagłówek warstwy transportowej i~nagłówek bezpieczeństwa
pozostaję niezaszyfrowane, aby umożliwić poprawne wyodrębnienie,
zidentyfikowanie i~odszyfrowanie wiadomości. Wiadomość typu \verb+OPN+
szyfrowana jest algorytmem asymetrycznym, przy~wykorzystaniu klucza
publicznego odbiorcy. Pozostałe wiadomości szyfrowane są symetrycznie
przy~pomocy klucza przypisanego do~danego kanału.


\subsubsection{Sposób nawiązania połączenia}

\begin{figure}[h]
	\centering

	\begin{tikzpicture}
		\draw[thick] (0,0) -- ++(0,6.5) node[above] {klient};
		\draw[thick] (2,0) -- ++(0,6.5) node[above] {bezp. kanał};
		\draw[thick] (4,0) -- ++(0,6.5) node[above] {TCP};
		\draw[thick] (10,0) -- ++(0,6.5) node[above] {TCP};
		\draw[thick] (12,0) -- ++(0,6.5) node[above] {bezp. kanał};
		\draw[thick] (14,0) -- ++(0,6.5) node[above] {serwer};

		\begin{scope}[shorten >=1mm, shorten <=1mm]
			\draw[-stealth] (4,5.5) -- ++(6,0)
				node[midway, above] {nawiązanie połączenia};
			\draw[-stealth] (4,4.5) -- ++(6,0)
				node[midway, above] {wiadomość \textit{Hello}};
			\draw[stealth-] (4,3.5) -- ++(6,0)
				node[midway, above] {wiadomość \textit{Acknowledge}};
			\draw[-stealth] (2,2.5) -- ++(10,0)
				node[midway, above] {żądanie \textit{Open Secure Channel}};
			\draw[stealth-] (2,1.5) -- ++(10,0)
				node[midway, above] {odp. na~\textit{Open Secure Channel}};
			\draw[-stealth] (0,.5) -- ++(14,0)
				node[midway, above] {utworzenie/aktywacja sesji};

		\end{scope}
	\end{tikzpicture}

	\caption{Graficzne przedstawienie procedury nawiązania połączenia}
	\label{nawi-pol}
\end{figure}

Procedurę nawiązania połączenia rozpoczyna zawsze klient, poprzez
nawiązanie połączenia TCP z~serwerem. Po~nawiązaniu połączenia, klient
wysyła wiadomość \textit{Hello}, zawierającą wersję protokołu klienta,
charakterystyczne ograniczenia wielkości pakietów i~wskazania żądanego
punktu końcowego połączenia. Na~tę wiadomość serwer odpowiada
wiadomością \textit{Acknowledge} zawierającą te same informacje
o~charakterystyce serwera. Po~wymianie tych dwóch wiadomości kanał
transportowy uznaje~się za~otwarty i~pozostaje on otwarty aż
do~zakończenia połączenia TCP.

Kolejnym krokiem jest uruchomienie kanału bezpiecznego. W~tym celu
klient wysyła do~serwera żądanie \textit{Open Secure Channel},
zawierające m.in.~wskazanie sposobu zabezpieczenia wiadomości oraz~dane
niezbędne do~jego realizacji, m.in. certyfikat klienta. W~odpowiedzi
na~to żądanie serwer potwierdza otwarcie kanału bądź określa przyczynę
odmowy. W~przypadku otwarcia kanału, serwer przydziela numer kanału
oraz~klucz wykorzystywany do~symetrycznego szyfrowania dalszych
wiadomości.

Bezpieczny kanał pozostaje ważny aż~do~upływu czasu ważności klucza
bądź~do~przesłania żądania zamknięcia kanału przez~klienta. W~przypadku
zerwania połączenia TCP, klient wznawia je i~wysyła żądanie wznowienia
kanału. W~przypadku upływu czasu ważności klucza, klient wysyła żądanie
wygenerowania nowego klucza.

Ostatnią częścią procedury łączenia jest przypisanie sesji. W~celu
utworzenia nowej sesji, klient wysyła żądanie \textit{Create Session},
w~odpowiedzi na~które otrzymuje m.in.~identyfikator sesji. Następnie
wysyła żądanie \textit{Activate Session}, które powoduje przypisanie
sesji do~kanału oraz~uwierzytelnienie klienta. W~przypadku wznawiania
istniejącej sesji żadanie \textit{Create Session} pomija~się, zaś
do~żądania \textit{Activate Session} przekazuje~się dane otrzymane
po~aktywacji sesji w~poprzednim połączeniu.

Sesja pozostaje ważna do~upływu czasu ważności sesji lub~jej
zakończenia przez~klienta.

Na~rys.~\ref{nawi-pol} przedstawiono schematycznie wymianę wiadomości
konieczną do~nawiązania połączenia.

\subsubsection{Sposób zakończenia połączenia}

\begin{figure}[h]
	\centering

	\begin{tikzpicture}
		\draw[thick] (0,0) -- ++(0,2.5) node[above] {klient};
		\draw[thick] (2,0) -- ++(0,2.5) node[above] {bezp. kanał};
		\draw[thick] (4,0) -- ++(0,2.5) node[above] {TCP};
		\draw[thick] (10,0) -- ++(0,2.5) node[above] {TCP};
		\draw[thick] (12,0) -- ++(0,2.5) node[above] {bezp. kanał};
		\draw[thick] (14,0) -- ++(0,2.5) node[above] {serwer};

		\begin{scope}[shorten >=1mm, shorten <=1mm]
			\draw[-stealth] (2,1.5) -- ++(10,0)
				node[midway, above] {żądanie \textit{Close Secure Channel}};
			\draw[stealth-] (4,.5) -- ++(6,0)
				node[midway, above] {zakończenie połączenia};

		\end{scope}
	\end{tikzpicture}

	\caption{Graficzne przedstawienie procedury zakończenia połączenia}
	\label{zako-pol}
\end{figure}

Zakończenie połączenia inicjowane jest zawsze przez~klienta. W~tym celu
klient wysyła do~serwera żądanie \textit{Close Secure Channel}.
Po~otrzymaniu tego żądania, serwer zwalnia wszystkie zasoby związane
z~kanałem i~zamyka połączenie TCP. Odpowiedź na~przesłane żądanie
nie~jest wysyłana.

Na~rys.~\ref{zako-pol} przedstawiono schematycznie wymianę wiadomości
w~przypadku zakończenia połączenia.


\subsection{Krytyka}

% http://blog.matrikonopc.com/index.php/open-standards-and-paying-to-play/

Standard OPC UA spotkał~się z~szeregiem krytycznych opinii. Najczęściej
krytykowanym aspektem jest płatny dostęp do~specyfikacji. Dla~wielu
programistów zainteresowanych implementacją OPC UA stanowi to znaczną
przeszkodę.

Jako kontrargument przytaczane są problemy ze~wczesną adaptacją
wcześniejszego standardu OPC. Ze~względu na~pełną otwartość, na~rynku
pojawiły~się implementacje wykonane przez~podmioty niebędące członkami
OPC Foundation, które często zawierały wiele błędów i~sprawiały problemy
ze~współpracą pomiędzy poszczególnymi produktami. Zastosowany model
licencyjny ma na~celu ograniczyć dostęp do~specyfikacji, udostępniając
ją jedynie tym podmiotom, które zainteresowane są członkostwem OPC
Foundation i~zainwestować w~rozwój standardu.\cite{opc-pay-to-play}

Można jednak zauważyć, że~podobny problem chociażby w~przypadku
protokołu Bluetooth rozwiązano bez~konieczności ograniczania dostępu
do~informacji. W~tym przypadku, specyfikacja jest otwarta i~dostępna
nieodpłatnie, jednakże ograniczone jest prawo tworzenia komercyjnych
produktów oraz~stosowania znaku marki.

% http://www.xpca.org/rest-pca/

Z~krytyką spotkało~się również zastosowanie technologii SOAP.
Do~podstawowych wad tej technologii zaliczane są nadmierne
skomplikowanie standardów oraz~znaczna wielkość pakietów sieciowych,
która negatywnie wpływa na~wydajność. W~przeszłości występowały również
liczne problemy ze~zgodnością pomiędzy poszczególnymi implementacji
SOAP.

Uwzględniona w~specyfikacji alternatywa w~postaci binarnego protokołu
OPC UA rozwiązuje te problemy, jednakże odbywa~się to kosztem
zastosowania niestandardowego protokołu i~utraty czytelności
przesyłanych informacji. Utrudnia to chociażby diagnozowanie błędów
w~implementacji\cite{rest-pca}.

% tu wstawić to coś o wydajności

Wątpliwości budzi także procedura zestawiania połączenia, która
każdorazowo wymaga kosztownych operacji kryptograficznych. W~przypadku
urządzeń o~niewielkiej wydajności procesora, które komunikują~się
z~serwerem jedynie okresowo może to powodować zauważalne opóźnienia
przesyłu danych.\cite{opc-overheads}

Podobny problem rozwiązano chociażby w~protokole TLS (\textit{Transport
Layer Security}), umożliwiając szybkie wznowienie sesji przerwanego
połączenia --- wówczas zamiast realizacji pełnej procedury zestawiania
kanału szyfrowanego wznawia~się wykorzystanie klucza wynegocjowanego
w~poprzedniej sesji.
