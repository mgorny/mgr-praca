\section{Realizacja serwera OPC dla~systemu Linux}

\subsection{Założenia wstępne}

\begin{figure}[ht]
	\centering

	\begin{tikzpicture}
		\begin{scope}[every node/.style={
				minimum width=4cm,
				minimum height=1.5cm,
				draw, rectangle
			}]

			\node (s) at (0,0) {serwer OPC UA};
			\node (k) at (-2.5,-4) {klient OPC UA};
			\node[dashed] (k2) at (2.5,-4) {klient OPC UA};
			\node[dashed] (k3) at (7.5,-4) {klient OPC UA};
			\node (m) at (8,0) {MT-101};
		\end{scope}

		\begin{scope}[stealth-stealth, shorten >=1mm, shorten <=1mm]
			\draw (s.east) -- (m.west)
				node[above, midway] {łacze RS232};

			\draw (s) to (k);
			\draw[dashed] (s) to (k2);
			\draw[dashed] (s) to (k3);
		\end{scope}

		\node[right] at (5,-2) {sieć LAN bądź WAN};
	\end{tikzpicture}

	\caption{Struktura logiczna komponentów wykonanego projektu}
\end{figure}


W~ramach projektu wykonane zostały następujące komponenty:

\begin{enumerate}
	\item serwer OPC UA, pracujący pod~kontrolą systemu GNU/Linux,

	\item moduł serwera, umożliwiający komunikację z~modułem
		telemetrycznym MT-101 przy~pomocy łącza RS232,

	\item klient OPC UA, przeznaczony do~testowania serwera.
\end{enumerate}

Serwer połączony jest z~modułem telemetrycznym za~pomocą łącza
szeregowego RS232. Do~wymiany danych wykorzystywany jest protokół
Modbus. Zasoby sprzętowe modułu udostępniane są w~przestrzeni adresowej
serwera.

Z~serwerem łączyć~się może dowolna liczba klientów. Połączenie
odbywa~się przy~pomocy protokołu OPC UA TCP. Klient może uruchomiony być
na~tym samym urządzeniu bądź~wykorzystywać sprzętowe łącze typu
lokalnego LAN (\textit{Local Area Network}) bądź globalnego WAN
(\textit{Wide Area Network}).


\subsection{Wybór platformy}

Wybór optymalnej platformy dla~projektu wymaga w~pierwszej kolejności
określenia typowych zadań, jakie realizować będzie wykonany program.
Następnie dla~zadań tych należy określić możliwą realizację w~oparciu
o~zasoby danej platformy.

Dla~implementacji serwera OPC UA podstawowe zadania to:

\begin{enumerate}
	\item serializacja wiadomości (żądań i~odpowiedzi) oraz
	standardowych typów danych, do~przynajmniej jednego z~dwóch
	opisanych w~specyfikacji formatów. Dodatkową korzyścią jest
	abstrakcja warstwy serializacji --- włączając w~to możliwość
	uzupełnienia programu o~dodatkowe metody serializacji za~pomocą
	zewnętrznego modułu, bez~konieczności modyfikowania głównej
	biblioteki.

	\item Obsługa komunikacji sieciowej w~oparciu przynajmniej o~jeden
	z~dwóch opisanych w~specyfikacji protokołów. Podobnie jak
	poprzednio, dodatkową korzyścią jest zastosowanie abstrakcji,
	umożliwiającej swobodne rozszerzanie serwera o~moduły obsługujące
	dodatkowe protokoły sieciowe.

	\item Przechowywanie i~obsługa przestrzeni adresowej. Program
	powinien zdolny być do~pracy z~bardzo dużą liczbą węzłów
	bez~nadmiernego wykorzystania pamięci bądź utraty wydajności.

	\item Pobieranie danych pomiarowych w~sposób nie~obciążający
	nadmiernie sieci, a~jednocześnie udostępniający
	niezbędną funkcjonalność. W~zależności od~stosowanej aparatury
	pomiarowej, pożądane może~być regularne pobieranie danych
	pomiarowych i~przechowywanie wartości historycznych w~pamięci
	serwera.
\end{enumerate}

Dostępne platformy dodatkowo ograniczone są koniecznością pracy serwera
pod~kontrolą systemu GNU/Linux. Dodatkowymi korzyściami dla~wybranej
platformy są:

\begin{enumerate}
	\item stabilność interfejsu programistycznego (API ---
	\textit{Application Programming Interface}). Zastosowanie platformy
	o~stabilnym API zmniejsza liczbę koniecznych przyszłych zmian
	w~programie w~celu przystosowania go do~nowej wersji platformy.

	\item Powszechność elementów platformy. Zastosowanie popularnych
	bibliotek czy~języka programowania zmniejsza ryzyko,
	że~na~urządzeniu docelowym konieczna będzie instalacja dodatkowego
	oprogramowania.

	\item Minimalna wielkość niezbędnego oprogramowania i~wykorzystanie
	zasobów --- umożliwiająca jego zastosowanie na~urządzeniach typu
	\textit{embedded}, a~co za~tym idzie ograniczenie kosztów.

	\item Dostępność wszystkich elementów platformy na~wolnych
	licencjach. Zastosowanie wolnego oprogramowania pozwala na~swobodne
	rozpowszechnianie serwera i~umożliwia jego dostosowanie do~własnych
	potrzeb przy~minimalnych kosztach.

	\item Dodatkową zaletą jest przenośność na~systemy inne
	niż~GNU/Linux.
\end{enumerate}

Po~uwzględnieniu wszystkich powyższych kryteriów wybór padł na~język
C++. Do~jego zalet należą:

\begin{enumerate}
	\item powszechna dostępność kompilatora C++ z~pakietu GCC
	(\textit{GNU Compiler Collection}). Kompilator ten jest elementem
	standardowej instalacji, bądź standardowego pakietu aplikacji
	dla~programistów, wielu dystrybucji systemu GNU/Linux,
	systemów BSD, systemu MacOS X oraz~platform Cygwin i~MinGW,
	umożliwiających portowanie aplikacji do~systemu Windows. Co więcej,
	kompilator języka C++ wymieniony jako element standardowych narzędzi
	programistycznych w~specyfikacji POSIX.

	\item Zdolność wytworzenia silnie zoptymalizowanego kodu maszynowego
	przy~minimalnej liczbie zależności. Pozwala to na~uzyskanie
	niewielkiej wielkości programu, dużej wydajności oraz~minimalnego
	wykorzystania pamięci.

	\item Duża liczba dostępnych bibliotek oraz~wsteczna zgodność
	z~językiem C, umożliwiająca stosowanie bibliotek pisanych dla~tego
	jężyka.

	\item Duża stabilność języka programowania, oraz~jego standaryzacja.  Język
	C++ opisany jest w~normie ISO/IEC 14882 (\textit{International Standard
	ISO/IEC 14882. Programming Languages – C++}),.

	\item Typowanie oraz~rozbudowane mechanizmy kontroli poprawności
	kodu podczas kompilacji. Pozwala to na~wczesne odnajdywanie błędów
	oraz ułatwia ich naprawę, a~co za~tym idzie minimalizuje ryzyko
	wystąpienia problemów w~trakcie eksploatacji.

	\item Mechanizmy obiektowości oraz~częściowe wsparcie
	introspekcji. Zastosowanie klas abstrakcyjnych pozwala na~zbudowanie
	modularnego serwera, który może~być łatwo rozszerzany za~pomocą
	zewnętrznych modułów. 
\end{enumerate}

Za~minimalną wersję języka C++ przyjęto wersję C++11 (ISO/IEC
14882:2011, publikacja: wrzesień 2011).  Wersja ta wprowadza wiele
usprawnień do~języka, i~jest w~stopniu dostatecznym obsługiwana
przez~aktualne wersje kompilatorów C++.  Przykładowo, standard C++11
jest w~przeważającej części wspierany przez kompilator GCC od~wersji 4.8
(marzec 2013) oraz~kompilator clang od~wersji 3.1 (maj 2012).

Standard C++ nie~przewiduje znormalizowanych funkcji obsługi połączeń
sieciowych.  Dla~systemu GNU/Linux oraz~systemów BSD funkcje sieciowe
zaimplementowane są w~oparciu o~interfejs \textit{Berkeley sockets},
uwzględniony z~niewielkimi modyfikacjami w~normie POSIX
(\textit{Portable Operating System Interface}, IEEE Std 1003.1-2001).
Ze~względu na~ograniczoną przenośność tych funkcji na~systemy z~rodziny
Windows oraz~niepełną standaryzację wydajnych nieblokujących funkcji
sieciowych, operacje sieciowe zrealizowano w~oparciu o~bibliotekę
libevent.
