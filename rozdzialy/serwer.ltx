\section{Realizacja serwera OPC}

\subsection{Założenia wstępne}

\begin{figure}[ht]
	\centering

	\begin{tikzpicture}
		\begin{scope}[every node/.style={
				minimum width=4cm,
				minimum height=1.5cm,
				draw, rectangle
			}]

			\node (s) at (0,0) {serwer OPC UA};
			\node (k) at (-2.5,-4) {klient OPC UA};
			\node[dashed] (k2) at (2.5,-4) {klient OPC UA};
			\node[dashed] (k3) at (7.5,-4) {klient OPC UA};
			\node (m) at (8,0) {MT-101};
		\end{scope}

		\begin{scope}[stealth-stealth, shorten >=1mm, shorten <=1mm]
			\draw (s.east) -- (m.west)
				node[above, midway] {łacze RS232};

			\draw (s) to (k);
			\draw[dashed] (s) to (k2);
			\draw[dashed] (s) to (k3);
		\end{scope}

		\node[right] at (5,-2) {sieć LAN bądź WAN};
	\end{tikzpicture}

	\caption{Struktura logiczna komponentów wykonanego projektu}
\end{figure}


W~ramach projektu wykonane zostały następujące komponenty:

\begin{itemize}
	\item stos (biblioteka) OPC UA, przy~pomocy którego zbudowane zostały
	pozostałe aplikacje,

	\item serwer OPC UA, współpracujący z~modułem telemetrycznym MT-101,

	\item serwer OPC UA, emulujący wirtualny moduł MT-101,

	\item klient OPC UA, przeznaczony do~testowania serwerów.
\end{itemize}

Serwer połączony jest z~modułem telemetrycznym za~pomocą łącza
szeregowego RS232. Do~wymiany danych wykorzystywany jest protokół
Modbus. Zasoby sprzętowe modułu udostępniane są w~przestrzeni adresowej
serwera.

Z~serwerem łączyć~się może dowolna liczba klientów. Połączenie
odbywa~się przy~pomocy protokołu OPC UA TCP. Klient może uruchomiony być
na~tym samym urządzeniu, wykorzystywać łącze typu lokalnego LAN
(\textit{Local Area Network}) lub~typu globalnego WAN (\textit{Wide Area
Network}).


\subsection{Wybór platformy}

Wybór optymalnej platformy dla~projektu wymaga w~pierwszej kolejności
określenia typowych zadań, jakie realizować będzie wykonany program.
Następnie dla~zadań tych należy określić możliwą realizację w~oparciu
o~zasoby danej platformy.

Dla~implementacji serwera OPC UA podstawowe zadania to:

\begin{itemize}
	\item serializacja wiadomości (żądań i~odpowiedzi) oraz
	standardowych typów danych, do~przynajmniej jednego z~dwóch
	opisanych w~specyfikacji formatów. Dodatkową korzyścią jest
	abstrakcja warstwy serializacji --- włączając w~to możliwość
	uzupełnienia programu o~dodatkowe metody serializacji za~pomocą
	zewnętrznego modułu, bez~konieczności modyfikowania głównej
	biblioteki.

	\item Obsługa komunikacji sieciowej w~oparciu przynajmniej o~jeden
	z~dwóch opisanych w~specyfikacji protokołów. Podobnie jak
	poprzednio, dodatkową korzyścią jest zastosowanie abstrakcji,
	umożliwiającej swobodne rozszerzanie serwera o~moduły obsługujące
	dodatkowe protokoły sieciowe.

	\item Przechowywanie i~obsługa przestrzeni adresowej. Program
	powinien zdolny być do~pracy z~bardzo dużą liczbą węzłów
	bez~nadmiernego wykorzystania pamięci bądź utraty wydajności.

	\item Pobieranie danych pomiarowych w~sposób nie~obciążający
	nadmiernie sieci, a~jednocześnie udostępniający
	niezbędną funkcjonalność. W~zależności od~stosowanej aparatury
	pomiarowej, pożądane może~być regularne pobieranie danych
	pomiarowych i~przechowywanie wartości historycznych w~pamięci
	serwera.
\end{itemize}

Dostępne platformy dodatkowo ograniczone są koniecznością pracy serwera
pod~kontrolą systemu GNU/Linux. Dodatkowymi korzyściami dla~wybranej
platformy są:

\begin{itemize}
	\item stabilność interfejsu programistycznego (API ---
	\eng{Application Programming Interface}). Zastosowanie platformy
	o~stabilnym API zmniejsza liczbę koniecznych przyszłych zmian
	w~programie w~celu przystosowania go do~nowej wersji platformy.

	\item Powszechność elementów platformy. Zastosowanie popularnych
	bibliotek czy~języka programowania zmniejsza ryzyko,
	że~na~urządzeniu docelowym konieczna będzie instalacja dodatkowego
	oprogramowania.

	\item Minimalna wielkość niezbędnego oprogramowania i~wykorzystanie
	zasobów --- umożliwiająca jego zastosowanie na~urządzeniach typu
	\textit{embedded}, a~co za~tym idzie ograniczenie kosztów.

	\item Dostępność wszystkich elementów platformy na~wolnych
	licencjach. Zastosowanie wolnego oprogramowania pozwala na~swobodne
	rozpowszechnianie serwera i~umożliwia jego dostosowanie do~własnych
	potrzeb przy~minimalnych kosztach.

	\item Dodatkową zaletą jest przenośność na~systemy inne
	niż~GNU/Linux.
\end{itemize}

Po~uwzględnieniu wszystkich powyższych kryteriów wybór padł na~język
\Cpp. Do~jego zalet należą:

\begin{itemize}
	\item powszechna dostępność kompilatora \Cpp{ }z~pakietu GCC
	(\eng{GNU Compiler Collection}). Kompilator ten jest elementem
	standardowej instalacji, bądź standardowego pakietu aplikacji
	dla~programistów, wielu dystrybucji systemu GNU/Linux,
	systemów BSD, systemu MacOS X oraz~platform Cygwin i~MinGW,
	umożliwiających portowanie aplikacji do~systemu Windows. Co więcej,
	kompilator języka \Cpp{ }wymieniony został jako element standardowych narzędzi
	programistycznych w~specyfikacji POSIX.

	\item Zdolność wytworzenia silnie zoptymalizowanego kodu maszynowego
	przy~minimalnej liczbie zależności. Pozwala to na~uzyskanie
	niewielkiej wielkości programu, dużej wydajności oraz~minimalnego
	wykorzystania pamięci.

	\item Duża liczba dostępnych bibliotek oraz~wsteczna zgodność
	z~językiem C, umożliwiająca stosowanie bibliotek pisanych dla~tego
	jężyka.

	\item Duża stabilność języka programowania, oraz~jego standaryzacja.  Język
	\Cpp{ }opisany jest w~normie ISO/IEC 14882\cite{c++}.

	\item Typowanie oraz~rozbudowane mechanizmy kontroli poprawności
	kodu podczas kompilacji. Pozwala to na~wczesne odnajdywanie błędów
	oraz ułatwia ich naprawę, a~co za~tym idzie minimalizuje ryzyko
	wystąpienia problemów w~trakcie eksploatacji.

	\item Mechanizmy obiektowości oraz~częściowe wsparcie
	introspekcji. Zastosowanie klas abstrakcyjnych pozwala na~zbudowanie
	modularnego serwera, który może~być łatwo rozszerzany za~pomocą
	zewnętrznych modułów. 
\end{itemize}

Za~minimalną wersję języka \Cpp{ }przyjęto wersję \Cpp11 (ISO/IEC
14882:2011, publikacja: wrzesień 2011).  Wersja ta wprowadza wiele
usprawnień do~języka, i~jest w~stopniu dostatecznym obsługiwana
przez~aktualne wersje kompilatorów \Cpp.  Przykładowo, standard \Cpp11

jest w~przeważającej części wspierany przez kompilator GCC od~wersji 4.8
(marzec 2013) oraz~kompilator clang od~wersji 3.1 (maj 2012).

Standard \Cpp{ }nie~przewiduje znormalizowanych funkcji obsługi połączeń
sieciowych.  Dla~systemu GNU/Linux oraz~systemów BSD funkcje sieciowe
zaimplementowane są w~oparciu o~interfejs \textit{Berkeley sockets},
uwzględniony z~niewielkimi modyfikacjami w~normie POSIX\cite{posix}.
Ze~względu na~ograniczoną przenośność tych funkcji na~systemy z~rodziny
Windows oraz~niepełną standaryzację wydajnych nieblokujących funkcji
sieciowych, operacje sieciowe zrealizowano w~oparciu o~bibliotekę
libevent\cite{libevent}.

Podobnie, standard \Cpp{ }nie~uwzględnia metod komunikacji za~pomocą portu
szeregowego. W~systemach opartych o~normę POSIX dostęp do~portu
szeregowego, podobnie jak do~przeważającej części urządzeń sprzętowych
oraz~wirtualnych, realizowany jest w~oparciu o~plik-urządzenie.
W~przypadku systemów zbudowanych na~jądrze Linux, pliki dla~kolejnych
portów szeregowych noszą nazwy \verb /dev/ttyS0 , \verb /dev/ttyS1 ,
itd. Dla~uzyskania przenośności aplikacji na~systemy z~rodziny Windows
oraz~uniknięcia konieczności powtórnej implementacji protokołu Modbus
RTU, komunikację z~modułem MT-101 zrealizowano w~oparciu o~bibliotekę
libmodbus\cite{libmodbus}.


\subsection{Sposób realizacji zadań}

\subsubsection{Serializacja wiadomości i~standardowych typów danych}

W~celu zrealizowania serializacji zadeklarowano interfejs
\textit{Serializer}, deklarujący metody serializacji poszczególnych
standardowych typów danych. Dla~poszczególnych sposobów kodowania danych
OPC UA, zdefiniowano klasy implementujące interfejs \textit{Serializer}
i~zapewniające implementację serializacji poszczególnych typów.

Oprócz tego, dla~poszczególnych typów złożonych zadeklarowano
interfejsy, udostępniające niezbędne metody pomocnicze dla~serializacji.
Przykładowo, poszczególne struktury implementują interfejs
\textit{Struct}. Podczas serializacji struktury, przedefiniowane
dla~określonej struktury metody pomocnicze tego interfejsu umożliwiają
serializację poszczególnych pól struktury bez~konieczności ich
wyliczania w~każdej klasie implementującej interfejs
\textit{Serializer}.

Serializacja oraz~deserializacja wykonywana jest przy~pomocy
dynamicznych binarnych buforów, umożliwiających zachowanie pełnej
odrębności pomiędzy konstrukcją typów wykorzystywanych przez~aplikację,
a~ich kodowaniem. Pozwala to połączyć optymalną wydajność operacji
na~danych z~przenośnością kodu do~systemów o~innej reprezentacji
binarnej typów.


\subsubsection{Implementacja przestrzeni adresowej}

W~celu uzyskania maksymalnej możliwej optymalizacji i~elastyczności
poszczególne typy węzłów zostały zaimplementowane przy~pomocy klas
abstrakcyjnych. Dostęp do~poszczególnych atrybutów i~referencji możliwy
jest zarówno za~pomocą dedykowanych metod, charakterystycznych dla~danej
klasy, jak i~metod uogólnionych, wykorzystujących identyfikatory
atrybutów i~referencji.

Przykładowo, klasa abstrakcyjna \textit{BaseNode} definiuje pustą metodę
wirtualną \textit{node\_id()}. Klasy implementujące poszczególne węzły
dziedziczą po~\textit{BaseNode} i~implementują tę metodę. Metody
pracujące bezpośrednio z~węzłami mogą --- dla~uzyskania lepszej
wydajności --- bezpośrednio wywoływać metodę wirtualną.

Oprócz tego, klasa \textit{BaseNode} deklaruje metodę wirtualną
\textit{get\_attribute()}, która umożliwia odczyt atrybutu w~oparciu
o~jego numeryczny identyfikator. Wartość atrybutu pozyskiwana jest
poprzez wywołanie odpowiadającej mu metody wirtualnej, tak~więc klasy
dziedziczące po~\textit{BaseNode} nie~muszą przedeklarowywać metody
\textit{get\_attribute()}.

Poszczególne typy węzłów mogą obsługiwać dodatkowe atrybuty. W~tym
celu deklarują dodatkowe metody abstrakcyjne oraz~przedefiniowują metodę
\textit{get\_attribute()}, uzupełniając ją o~mapowanie identyfikatorów
atrybutów charakterystycznych dla~danego podtypu. Umożliwia to
pobieranie atrybutów węzła bez~konieczności konwersji typu
z~podstawowego na~typ implementujący dany atrybut. Ułatwia to chociażby
implementację usługi \textit{Read}, wykorzystywanej do~odczytu
atrybutów.

Wskaźniki do~poszczególnych węzłów przechowywane są w~kontenerze typu
\textit{std::unordered\_map}. Poszczególne węzły skojarzone są z~ich
identyfikatorami, co pozwala na~szybkie poszukiwanie węzła o~żądanym
identyfikatorze. Odniesienia do~węzłów zaimplementowano za~pomocą
dzielonych wskaźników \textit{std::shared\_ptr}, co~pozwala na~łatwe
tworzenie nowych węzłów i~dodawanie ich do~przestrzeni adresowej
bez~konieczności implementacji własnego zarządzania pamięcią.


\subsubsection{Komunikacja z~MT-101}

Komunikacja z~MT-101 odbywa~się za~pośrednictwem dedykowanych podklas
klasy \textit{Variable}, opisującej zmienną w~przestrzeni adresowej.
Wywołanie metody \textit{value()} powoduje skomunikowanie~się
z~urządzeniem i~pobranie wartości danej zmiennej.

W~celu zoptymalizowania pracy serwera, każdorazowo z~modułu pobierane są
i~zapisywane w~pamięci serwera wartości wszystkich dostępnych
dla~klienta zmiennych. Pozwala to przyspieszyć pracę w~przypadku
sekwencyjnego odczytu wielu zmiennych. Zmienne opatrzone są również
czasem ich odczytu, co umożliwia określenie, czy~konieczny jest ponowny
ich odczyt w~zależności od~żądanego przez~klienta stopnia aktualności
przesyłanych danych.

Podobnie, przesłane przez~klienta żądania zapisu są kolejkowane
w~pamięci serwera. Po~zakończeniu przetwarzania wiadomości, poszczególne
zmiany łączone są w~możliwie kompaktowe żądania zapisu i~przesyłane
do~urządzenia.


\subsection{Wykonane programy}

\subsubsection{Serwer MT-101}

Najważniejszym elementem wykonanym przez~autora w~obrębie pracy jest
serwer OPC UA, który współpracuje z~modułem MT-101. W~przestrzeni
adresowej serwera udostępnione są następujące zasoby modułu:

\begin{itemize}
	\item stany wejść binarnych I1 -- I8 (tylko odczyt),

	\item stany wymuszeń wyjść binarnych Q1 -- Q8 (odczyt i~zapis),

	\item wielkości inżynierskie na~wejściach analogowych AN1 i~AN2
	(odczyt).
\end{itemize}

Serwer jest programem nieinteraktywnym. Po~uruchomieniu rozpoczyna
komunikację z~modułem przy~wykorzystaniu portu szeregowego, a~następnie
otwiera port sieciowy i~przyjmuje połączenia od~klientów.

Komunikacja z~klientami odbywa~się w~trybie jednowątkowym
z~wykorzystaniem operacji nieblokujących. Serwer przyjmuje dane
przychodzące w~pętli bezczynności. Przetwarzanie rozpoczyna~się dopiero
po~otrzymaniu całej wiadomości, i~powoduje zablokowanie pracy serwera.
Po~przetworzeniu wiadomości i~skonstruowaniu odpowiedzi, serwer może
przetwarzać kolejne wiadomości.

Serwer może obsługiwać wielu klientów, przy~czym żądania poszczególnych
klientów realizowane są sekwencyjnie, w~kolejności otrzymania
wiadomości. Model ten nie~sprawdzi~się w~przypadku dużej liczby klientów
--- wówczas konieczne jest zastosowanie modelu wielowątkowego,
umożliwiającego jednoczesne przetwarzanie żądań wielu klientów.

Komunikacja z~modułem MT-101 odbywa~się w~trybie blokującym.
Każdorazowego wywołanie polecenia modułu powoduje zatrzymanie
przetwarzania wiadomości do~momentu otrzymania odpowiedzi
(potwierdzenia).

\begin{figure}[ht]
	\centering

	\begin{tikzpicture}
		\begin{scope}[every node/.style={rectangle,draw}]
			\node[below left, minimum width=2cm,minimum height=14cm]
				at (0,0) {klient};
			\node[below right, minimum width=2cm,minimum height=14cm]
				at (3,0) {serwer};
			\node[below right, minimum width=2cm,minimum height=14cm]
				at (7,0) {cache};
			\node[below right, minimum width=2cm,minimum height=14cm]
				at (12,0) {MT-101};
		\end{scope}

		\begin{scope}[shorten >=2mm, shorten <=2mm]
			\draw[-stealth] (0,-.5) -- ++(3,0)
				node[above, midway] {odczyt I1, I2};

			\draw[-stealth] (5,-.5) -- ++(2,0)
				node[above, midway] {odczyt I1};
			\draw[-stealth] (9,-.5) -- ++(3,0)
				node[above, midway] {odczyt pamięci};

			\draw[stealth-] (9,-1.5) -- ++(3,0)
				node[above, midway] {zaw. pamięci};
			\draw[stealth-] (5,-1.5) -- ++(2,0)
				node[above, midway] {wartość I1};

			\draw[-stealth] (5,-2.5) -- ++(2,0)
				node[above, midway] {odczyt I2};
			\draw[stealth-] (5,-3.5) -- ++(2,0)
				node[above, midway] {wartość I2};

			\draw[stealth-] (0,-3.5) -- ++(3,0)
				node[above, midway] {wartość I1, I2};

			\draw[-stealth] (0,-4.5) -- ++(3,0)
				node[above, midway] {odczyt I3};
			\draw[-stealth] (5,-4.5) -- ++(2,0)
				node[above, midway] {odczyt I1};
			\draw[-stealth, dashed] (9,-4.5) -- ++(3,0)
				node[above, midway] {odczyt pamięci};

			\draw[stealth-, dashed] (9,-5.5) -- ++(3,0)
				node[above, midway] {zaw. pamięci};
			\draw[stealth-] (5,-5.5) -- ++(2,0)
				node[above, midway] {wartość I3};
			\draw[stealth-] (0,-5.5) -- ++(3,0)
				node[above, midway] {wartość I3};

			\draw[-stealth] (0,-7.5) -- ++(3,0)
				node[above, midway] {zapis Q1, Q2};
			\draw[-stealth] (5,-7.5) -- ++(2,0)
				node[above, midway] {zapis Q1};
			\draw[-stealth] (5,-8.5) -- ++(2,0)
				node[above, midway] {zapis Q2};

			\draw[stealth-] (0,-9.5) -- ++(3,0)
				node[above, midway] {potwierdzenie};

			\draw[-stealth] (0,-10.5) -- ++(3,0)
				node[above, midway] {zapis Q3};
			\draw[-stealth] (5,-10.5) -- ++(2,0)
				node[above, midway] {zapis Q3};
			\draw[stealth-] (0,-11.5) -- ++(3,0)
				node[above, midway] {potwierdzenie};

			\draw[-stealth] (9,-12.5) -- ++(3,0)
				node[above, midway] {zapis Q1 -- Q3};
			\draw[stealth-] (9,-13.5) -- ++(3,0)
				node[above, midway] {potwierdzenie};

		\end{scope}
	\end{tikzpicture}

	\caption{Graficzna ilustracja działania mechanizmu pamięci
	podręcznej \textit{,,cache''}}
	\label{rys-serwer-cache}
\end{figure}

Zakłada się, że~połączenie z~MT-101 jest pewne
i~charakteryzuje~się niewielkim czasem odpowiedzi. W~celu poprawy
wydajności obsługi sekwencyjnych żądań odczytu oraz~zapisu, zastosowano
mechanizm wykorzystania pamięci podręcznej \textit{,,cache''}, którego
działanie zostało zilustrowane na~rys.~\ref{rys-serwer-cache}.

Przesyłane przez~klienta żądania odczytu wykonywane są sekwencyjnie,
za~pośrednictwem pamięci cache. Jeżeli w~pamięci cache znajduje~się
dostatecznie aktualna kopia wartości żądanej zmiennej, jest ona
przesyłana w~odpowiedzi bez~konieczności komunikacji z~modułem.
W~przeciwnym razie, zawartość pamięci cache jest aktualizowane
poprzez~wysłanie żądania odczytu bloku pamięci do~modułu.

Podobnie, przesłane żądania zapisu kolejkowane są w~pamięci cache.
Pozwala to na~połączenie ich w~jedną komendę, która przesłana zostaje
do~modułu po~przetworzeniu zakolejkowanych zdarzeń.


\subsubsection{Serwer wirtualny}

Serwer wirtualny stanowi zmodyfikowaną wersją serwera MT-101, która
umożliwia demonstrację funkcjonalności serwera bez~konieczności
nawiązania łączności z~modułem.

Serwer wirtualny udostępnia identyczną przestrzeń adresową jak~serwer
MT-101. Stan wejść oraz~wyjść przedstawiony jest graficznie na~ekranie
komputera, i~może być kontrolowany za~pomocą klawiatury.

\begin{figure}[ht]
	\centering
	\includegraphics[scale=0.4]{zdj/virtual-server.png}

	\caption{Zrzut ekranu serwera wirtualnego}
	\label{vserv-zrzut}
\end{figure}

Stany wejść oraz~wyjść cyfrowych przedstawione są za~pomocą symboli
,,-'' (fałsz) oraz~,,+'' (prawda). Dla~wejść analogowych przedstawiona
jest wartość numeryczna skonfigurowanej wielkości. W~przypadku zmiany
wartości, wskazania pozostaje podświetlone przez okres 2~sekund.

Manipulacja stanem wejść i~wyjść cyfrowych możliwa jest przy~pomocy
dwóch górnych wierszy klawiatury alfanumerycznej. Odpowiednio:

\begin{itemize}
	\item klawisze od~,,1'' do~,,8'' zmieniają stan odpowiedniego
		wejścia cyfrowego I1 -- I8 na~przeciwny,

	\item klawisze od~,,Q'' do~,,I'' zmieniają stan odpowiedniego
		wyjścia cyfrowego Q1 -- Q8 na~przeciwny.
\end{itemize}

Oprócz tego, stan wyjść cyfrowych zmieniony może być przez~klienta.

Manipulacja wartością wejść analogowych odbywa~się przy~pomocy
następujących klawiszy:

\begin{itemize}
	\item klawisze ,,A'' i~,,Z'' odpowiednio zwiększają bądź~zmniejszają
		wartość na~wejściu AN1,

	\item klawisze ,,S'' i~,,X'' odpowiednio zwiększają bądź~zmniejszają
		wartość na~wejściu AN2.
\end{itemize}

Przytrzymanie klawisza ,,shift'' przyspiesza tempo zmian wartości.


\subsubsection{Klient}

Kolejną aplikacją jest klient OPC UA, którego zadaniem jest
zademonstrowanie możliwego sposobu współpracy z~serwerem. Klient jest
nieinteraktywną aplikacją, pracującą w~trybie tekstowym.
Po~uruchomieniu, klient nawiązuje połączenie z~serwerem i~z~odstępem
2~sekund pobiera cyklicznie z~serwera informacje o~stanie wejść i~wyjść.

\begin{figure}[ht]
	\centering
	\includegraphics[scale=0.4]{zdj/client.png}

	\caption{Zrzut ekranu klienta}
	\label{cli-zrzut}
\end{figure}

Otrzymane informacje wypisywane są w~kolejnych wierszach wraz
ze~wskazaniem czasu ich otrzymania, a~zmiany w~stosunku do~poprzedniego
zapytania są wyróżnione graficznie.

Oprócz tego, klient demonstruje możliwość realizacji zautomatyzowanych
procesów sterowania. Dla~każdego otrzymanego stanu wejść, określany jest
nowy stan wyjść przy~wykorzystaniu algorytmu~\ref{algo-wyj}. Jeżeli
otrzymany stan wyjść różni~się od~obecnego, wysyłane jest żądanie zapisu
nowego stanu.

\begin{algorithm}[ht]
	\caption{Algorytm określania stanu wyjść binarnych}
	\label{algo-wyj}

	\begin{algorithmic}[1]
		\State \textit{xorpattern} := \verb+0b00101110+
		\State \textit{wyj1} := \textit{wejbin}
			\textbf{xor} \textit{xorpattern}
		\State \textit{an1b} := (\textit{an1}
			\textbf{and} \verb+0xff0+) \textbf{shr} 4
		\State \textit{wyj2} := \textit{wyj1}
			\textbf{xor} \textit{an1b}
		\State \textit{an2b} := (\textit{an2}
			\textbf{and} \verb+0xff00+) \textbf{shr} 8
		\State \textit{wyjbin} := \textit{wyj2}
			\textbf{xor} \textit{an2b}
	\end{algorithmic}
\end{algorithm}
